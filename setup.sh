#!/bin/bash
# setup.sh - Full interactive onboarding for SBA24070 Book Catalogue App
# - Prompts for all Django and DB info
# - Creates .env and k8s/secret.yaml
# - Updates settings.py with DB info
# - Attempts to create Postgres DB/user (if local)
# - Runs migrations, collectstatic, and admin setup
# - Applies Kubernetes manifests and post-setup steps
# - Informs user at every step
set -e

# Function to update DB settings in settings.py
update_db_settings() {
    local db_name="$1"
    local db_user="$2"
    local db_password="$3"
    local db_host="$4"
    local db_port="$5"
    sed -i \
        -e "/'NAME':/c\        'NAME': '$db_name'," \
        -e "/'USER':/c\        'USER': '$db_user'," \
        -e "/'PASSWORD':/c\        'PASSWORD': '$db_password'," \
        -e "/'HOST':/c\        'HOST': '$db_host'," \
        -e "/'PORT':/c\        'PORT': '$db_port'," \
        sba24070_book_catalogue/settings.py
    echo "[INFO] Updated DB settings in settings.py"
}

# Function to prompt for .env and k8s/secret.yaml values
create_env_and_secret() {
    echo "\n==============================="
    echo " Kubernetes/.env Setup"
    echo "==============================="
    read -p "Django SECRET_KEY: " SECRET_KEY
    read -p "Postgres DB name: " POSTGRES_DB
    read -p "Postgres user: " POSTGRES_USER
    read -p "Postgres password: " POSTGRES_PASSWORD
    read -p "Postgres host [default: postgres]: " POSTGRES_HOST
    POSTGRES_HOST=${POSTGRES_HOST:-postgres}
    read -p "Postgres port [default: 5432]: " POSTGRES_PORT
    POSTGRES_PORT=${POSTGRES_PORT:-5432}
    read -p "DEBUG [default: False]: " DEBUG
    DEBUG=${DEBUG:-False}
    echo "\n--- Docker Hub & CI/CD ---"
    read -p "Docker Hub username (for image pushes and CI/CD): " DOCKER_USERNAME
    read -p "Docker Hub password or access token: " DOCKER_PASSWORD

    # Write .env file
    cat > .env <<EOF
SECRET_KEY=$SECRET_KEY
POSTGRES_DB=$POSTGRES_DB
POSTGRES_USER=$POSTGRES_USER
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
POSTGRES_HOST=$POSTGRES_HOST
POSTGRES_PORT=$POSTGRES_PORT
DEBUG=$DEBUG
DOCKER_USERNAME=$DOCKER_USERNAME
DOCKER_PASSWORD=$DOCKER_PASSWORD
EOF
    echo "[INFO] .env file created."
    echo "[INFO] Remember to add DOCKER_USERNAME and DOCKER_PASSWORD as GitHub repository secrets for CI/CD."

    # Write k8s/secret.yaml (base64-encoded values)
    mkdir -p k8s
    cat > k8s/secret.yaml <<EOF
# secret.yaml
# Auto-generated by setup.sh. Stores sensitive env vars for Django and Postgres.
# Do NOT commit this file to public repos.
apiVersion: v1
kind: Secret
metadata:
  name: django-secret
  labels:
    app: django
    purpose: environment
    managed-by: user
type: Opaque
data:
  SECRET_KEY: $(echo -n "$SECRET_KEY" | base64)
  POSTGRES_DB: $(echo -n "$POSTGRES_DB" | base64)
  POSTGRES_USER: $(echo -n "$POSTGRES_USER" | base64)
  POSTGRES_PASSWORD: $(echo -n "$POSTGRES_PASSWORD" | base64)
EOF
    echo "[INFO] k8s/secret.yaml created."
}

# Function to attempt to create the Postgres DB and user (for local dev)
create_postgres_db() {
    echo "[INFO] Attempting to create Postgres DB and user (requires psql access)"
    if command -v psql >/dev/null 2>&1; then
        PSQL_CMD="psql -U postgres -h ${POSTGRES_HOST:-localhost} -p ${POSTGRES_PORT:-5432}"
        echo "CREATE USER $POSTGRES_USER WITH PASSWORD '$POSTGRES_PASSWORD';" | $PSQL_CMD 2>/dev/null || true
        echo "CREATE DATABASE $POSTGRES_DB OWNER $POSTGRES_USER;" | $PSQL_CMD 2>/dev/null || true
        echo "[INFO] Attempted to create DB '$POSTGRES_DB' and user '$POSTGRES_USER'."
    else
        echo "[WARN] psql not found. Please ensure your Postgres DB and user exist."
    fi
}

echo "=========================================="
echo " SBA24070 Book Catalogue Setup Script"
echo "=========================================="

# 1. Prompt for all secrets and config
create_env_and_secret

# 2. Local Django setup
echo "\n==============================="
echo " Local Django Setup"
echo "==============================="
update_db_settings "$POSTGRES_DB" "$POSTGRES_USER" "$POSTGRES_PASSWORD" "localhost" "$POSTGRES_PORT"
create_postgres_db
if [ ! -d "devops" ]; then
    echo "[INFO] Creating virtual environment 'devops'..."
    python3 -m venv devops
fi
source devops/bin/activate
pip install --upgrade pip
    pip install -r requirements.txt
python manage.py makemigrations
python manage.py migrate
python manage.py collectstatic --noinput
python admin_manager.py
echo "\n[INFO] App ready! Visit: http://127.0.0.1:8000"
echo "[INFO] Admin login: admin / admin"
python manage.py runserver &

# 3. Docker Compose setup
echo "\n==============================="
echo " Docker Compose Setup"
echo "==============================="
update_db_settings "$POSTGRES_DB" "$POSTGRES_USER" "$POSTGRES_PASSWORD" "db" "$POSTGRES_PORT"
echo "[INFO] Docker Compose will handle DB creation."
docker compose up --build -d
docker compose exec web python manage.py migrate
docker compose exec web python manage.py collectstatic --noinput
docker compose exec web python manage.py create_admin
echo "\n[INFO] App ready! Visit: http://localhost:8000"
echo "[INFO] Admin login: admin / admin"
echo "[INFO] To stop: docker compose down"

# 4. Kubernetes setup
echo "\n==============================="
echo " Kubernetes Setup"
echo "==============================="
update_db_settings "$POSTGRES_DB" "$POSTGRES_USER" "$POSTGRES_PASSWORD" "postgres" "$POSTGRES_PORT"
echo "[INFO] Kubernetes/.env setup complete. See KUBERNETES.md for next steps."
echo "[INFO] Applying Kubernetes manifests..."
kubectl apply -f k8s/secret.yaml
kubectl apply -f k8s/configmap.yaml
kubectl apply -f k8s/postgres-deployment.yaml
kubectl apply -f k8s/deployment.yaml
kubectl apply -f k8s/service.yaml
echo "[INFO] Kubernetes resources applied."
echo "[INFO] Waiting for Django pod to be ready..."
# Wait for the Django pod to be running
while true; do
  DJANGO_POD=$(kubectl get pods -l app=django -o jsonpath='{.items[0].metadata.name}')
  STATUS=$(kubectl get pod "$DJANGO_POD" -o jsonpath='{.status.phase}')
  if [ "$STATUS" = "Running" ]; then
    break
  fi
  echo "[INFO] Waiting for pod $DJANGO_POD to be Running..."
  sleep 3
  kubectl get pods
  kubectl get svc
  DJANGO_URL=$(minikube service django-service --url)
  echo "[INFO] Django service URL: $DJANGO_URL"
done
echo "[INFO] Django pod is running: $DJANGO_POD"
echo "[INFO] Running migrations in the Django pod..."
kubectl exec -it "$DJANGO_POD" -- python manage.py migrate
echo "[INFO] Collecting static files in the Django pod..."
kubectl exec -it "$DJANGO_POD" -- python manage.py collectstatic --noinput
echo "[INFO] Creating admin user in the Django pod..."
kubectl exec -it "$DJANGO_POD" -- python manage.py create_admin
echo "[INFO] Opening Django service in browser using minikube..."
minikube service django-service
# Get the service URL and curl it as the user
DJANGO_URL=$(minikube service django-service --url)
echo "[INFO] Curling the Django service as the user: $DJANGO_URL"
curl "$DJANGO_URL"
echo "[INFO] Setup complete! Visit $DJANGO_URL in your browser."
echo "[INFO] To check status: kubectl get pods, kubectl get svc"
echo "[INFO] See KUBERNETES.md for access instructions." 